{
	"info": {
		"_postman_id": "0bf84df2-431e-4280-940c-ce6f92d7626a",
		"name": "Imagine Bookstore API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18937057"
	},
	"item": [
		{
			"name": "Books",
			"item": [
				{
					"name": "Get All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{local}}/book",
							"host": [
								"{{local}}"
							],
							"path": [
								"book"
							]
						}
					},
					"response": [
						{
							"name": "With Filter",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{local}}/book?genre=quia&author=Dane Hegmann",
									"host": [
										"{{local}}"
									],
									"path": [
										"book"
									],
									"query": [
										{
											"key": "genre",
											"value": "quia"
										},
										{
											"key": "author",
											"value": "Dane Hegmann"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Add New Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Test Title",
									"type": "text"
								},
								{
									"key": "author",
									"value": "Test author",
									"type": "text"
								},
								{
									"key": "genre",
									"value": "Test genre",
									"type": "text"
								},
								{
									"key": "price",
									"value": "100",
									"type": "text"
								},
								{
									"key": "stock",
									"value": "10",
									"type": "text"
								},
								{
									"key": "cover",
									"type": "file",
									"src": "/C:/Users/Danie/Desktop/files.jpg"
								}
							]
						},
						"url": {
							"raw": "{{local}}/book",
							"host": [
								"{{local}}"
							],
							"path": [
								"book"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 401', function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"})",
									"",
									"pm.test('Response has the \\'message\\' field', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist;",
									"})",
									"",
									"pm.test('The \\'message\\' field is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Test Title2",
									"type": "text"
								},
								{
									"key": "author",
									"value": "Test author",
									"type": "text",
									"disabled": true
								},
								{
									"key": "genre",
									"value": "Test genre",
									"type": "text",
									"disabled": true
								},
								{
									"key": "price",
									"value": "100",
									"type": "text",
									"disabled": true
								},
								{
									"key": "stock",
									"value": "10",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cover",
									"type": "file",
									"src": "/C:/Users/Danie/Desktop/files.jpg",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{local}}/book/:bookID?_method=PUT",
							"host": [
								"{{local}}"
							],
							"path": [
								"book",
								":bookID"
							],
							"query": [
								{
									"key": "_method",
									"value": "PUT"
								}
							],
							"variable": [
								{
									"key": "bookID",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Show Book Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Title is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Price is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.price).to.be.a('number');",
									"    pm.expect(responseData.data.price).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Stock is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.stock).to.be.a('number');",
									"    pm.expect(responseData.data.stock).to.be.at.least(0, \"Stock should be non-negative\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{local}}/book/:bookID",
							"host": [
								"{{local}}"
							],
							"path": [
								"book",
								":bookID"
							],
							"variable": [
								{
									"key": "bookID",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'status' field is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'message' field is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'data' field is an array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'data' field contains the expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    pm.expect(responseData.data.length).to.equal(0, \"Expected number of elements is 0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Esse at unde non.",
									"type": "text"
								},
								{
									"key": "author",
									"value": "Crawford",
									"type": "text"
								},
								{
									"key": "genre",
									"value": "adipisci",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{local}}/book/search",
							"host": [
								"{{local}}"
							],
							"path": [
								"book",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{local}}/book/:bookID",
							"host": [
								"{{local}}"
							],
							"path": [
								"book",
								":bookID"
							],
							"variable": [
								{
									"key": "bookID",
									"value": "12"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"token\", res.authorization.token);\r",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the status field is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"The message field should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate 'authorization' object\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.authorization).to.exist.and.to.be.an('object');",
									"  pm.expect(responseData.authorization.token).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.authorization.type).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Somar",
									"type": "text"
								},
								{
									"key": "email",
									"value": "test@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "115599",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{local}}/register",
							"host": [
								"{{local}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"token\", res.authorization.token);\r",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the status field is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate the authorization object has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.authorization).to.exist.and.to.be.an('object');",
									"  pm.expect(responseData.authorization.token).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.authorization.type).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"The 'token' field in the 'authorization' object is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.authorization.token).to.exist.and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "admin@admin.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{local}}/login",
							"host": [
								"{{local}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"token\",  );\r",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields - status and message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "test@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "115599",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{local}}/logout",
							"host": [
								"{{local}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "test@test.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "115599",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{local}}/refresh",
							"host": [
								"{{local}}"
							],
							"path": [
								"refresh"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Get User Cart",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{local}}/cart",
							"host": [
								"{{local}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Book To Cart",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "book_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "qty",
									"value": "10",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{local}}/cart",
							"host": [
								"{{local}}"
							],
							"path": [
								"cart"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Cart",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "book_id",
									"value": "5",
									"type": "text"
								},
								{
									"key": "qty",
									"value": "6",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{local}}/cart/:cartID?_method=PUT",
							"host": [
								"{{local}}"
							],
							"path": [
								"cart",
								":cartID"
							],
							"query": [
								{
									"key": "_method",
									"value": "PUT"
								}
							],
							"variable": [
								{
									"key": "cartID",
									"value": "8"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "Get User Orders",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{local}}/order",
							"host": [
								"{{local}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "cart_id",
									"value": "5",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{local}}/order",
							"host": [
								"{{local}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "local",
			"value": "http://127.0.0.1:8000/api",
			"type": "string"
		},
		{
			"key": "token",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNjk2NTExMTA4LCJleHAiOjE2OTY1MTQ3MDgsIm5iZiI6MTY5NjUxMTEwOCwianRpIjoiYURoM3dhNlozZmN3b2lLRSIsInN1YiI6IjYiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.waWolzmgDtmYHd3WDWtXlLcdnHpybzJsi1IciN11azU",
			"type": "string"
		}
	]
}